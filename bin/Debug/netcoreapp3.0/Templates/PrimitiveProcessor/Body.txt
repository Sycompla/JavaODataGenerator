
	private OData odata;
	private Storage storage;
    private ServiceMetadata serviceMetadata;

	public ODataPrimitiveProcessor(Storage storage) {
		this.storage = storage;
	}

	public void init(OData odata, ServiceMetadata serviceMetadata) {
		this.odata = odata;
    this.serviceMetadata = serviceMetadata;
	}
	
	public void readPrimitive(ODataRequest request, ODataResponse response, 
								UriInfo uriInfo, ContentType responseFormat) 
								throws ODataApplicationException, SerializerException {

		List<UriResource> resourceParts = uriInfo.getUriResourceParts();
		UriResourceEntitySet uriEntityset = (UriResourceEntitySet) resourceParts.get(0); 
		EdmEntitySet edmEntitySet = uriEntityset.getEntitySet();
		List<UriParameter> keyPredicates = uriEntityset.getKeyPredicates();
		
		UriResourceProperty uriProperty = (UriResourceProperty)resourceParts.get(resourceParts.size() -1); // the last segment is the Property
		EdmProperty edmProperty = uriProperty.getProperty();
		String edmPropertyName = edmProperty.getName();

		EdmPrimitiveType edmPropertyType = (EdmPrimitiveType) edmProperty.getType(); 
		
		Entity entity = storage.readEntityData(edmEntitySet, keyPredicates);
		if (entity == null) { // Bad request
			throw new ODataApplicationException("Entity not found",
							HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
		} 
		
		Property property = entity.getProperty(edmPropertyName);
		if (property == null) {
			throw new ODataApplicationException("Property not found",
              HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
		}		
		
		// 3. serialize
		Object value = property.getValue();
		if (value != null) {
			ODataSerializer serializer = odata.createSerializer(responseFormat);
			
			ContextURL contextUrl = ContextURL.with().entitySet(edmEntitySet).navOrPropertyPath(edmPropertyName).build();
			PrimitiveSerializerOptions options = PrimitiveSerializerOptions.with().contextURL(contextUrl).build();
			
			SerializerResult result = serializer.primitive(serviceMetadata, edmPropertyType, property, options);
			
			response.setContent(result.getContent());
			response.setStatusCode(HttpStatusCode.OK.getStatusCode());
			response.setHeader(HttpHeader.CONTENT_TYPE, responseFormat.toContentTypeString());		
		}else{
			response.setStatusCode(HttpStatusCode.NO_CONTENT.getStatusCode());
		}
	}

	public void updatePrimitive(ODataRequest request, ODataResponse response, UriInfo uriInfo,
                              ContentType requestFormat, ContentType responseFormat)
								throws ODataApplicationException, DeserializerException, SerializerException {
		throw new ODataApplicationException("Not supported.", HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ROOT);
	}

	public void deletePrimitive(ODataRequest request, ODataResponse response, UriInfo uriInfo)
          throws ODataApplicationException {
		throw new ODataApplicationException("Not supported.", HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ROOT);
	}